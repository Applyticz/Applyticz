# Alembic for Database Migrations in FastAPI

This guide will help you manage database schema changes using Alembic in a FastAPI project. Follow the steps below to update your database models and apply the corresponding migrations to your database.

## Prerequisites

Ensure you have Alembic installed in your project. You can install it with:

```bash
pip install alembic
```

Also, ensure that Alembic has been initialized in your project. If not, run:

```bash
alembic init alembic
```

This will create an `alembic/` directory containing the Alembic configuration and migration environment.

## Steps for Updating Database Models

### Step 1: Modify Your Database Models
Navigate to the directory containing your database models (e.g., `app/models/db/`) and update the existing models or add new ones.

For example, to add a new `User` model:

```python
from sqlalchemy import Column, Integer, String
from app.database import Base

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    email = Column(String, unique=True, nullable=False)
```

### Step 2: Generate a New Migration
Once you've added or modified the model, create a migration to reflect the changes in your database schema. Use the following command to autogenerate a migration:

```bash
alembic revision --autogenerate -m "Add new User model"
```

This will create a migration script based on the changes in your SQLAlchemy models. The `-m` flag allows you to specify a descriptive message for the migration.

### Step 3: Review the Migration Script
Alembic will create a new migration script in the `alembic/versions/` folder. It's good practice to review the script to ensure it accurately represents the changes you've made to your models.

### Step 4: Apply the Migration
Once you're satisfied with the migration script, apply it to your database using:

```bash
alembic upgrade head
```

This command will update your database schema to the latest version, applying the newly created migration.

### Step 5: Downgrade Migration (if needed)
If you need to undo the migration, you can downgrade it with:

```bash
alembic downgrade -1
```

This command will revert the database schema to the previous version.

### Step 6: Upgrade Migration (if needed)
If you need to undo the downgrade migration, you can upgrade it with:

```bash
alembic upgrade +1
```

This command will revert the database schema to the previous version prior to the downgrade.

## Managing Alembic Files

### Files to Include in Version Control
- **`alembic/versions/`**: This folder contains migration scripts and should be included in version control (e.g., GitHub) so that all team members can track schema changes.
- **`alembic.ini`**: The Alembic configuration file, which contains database connection settings (using environment variables for sensitive data like `DATABASE_URL`).

### Files to Ignore
- **`alembic/__pycache__/`**: Byte-compiled files should be ignored in `.gitignore`.

## Quick Alembic Commands
- **Autogenerate a migration**: `alembic revision --autogenerate -m "Your migration message"`
- **Apply a migration**: `alembic upgrade head`
- **Downgrade a migration**: `alembic downgrade -1`

## Example Workflow
1. **Add or update models** in your `models.py` or relevant files.
2. **Generate a new migration** with `alembic revision --autogenerate -m "Your message"`.
3. **Review the migration** script.
4. **Apply the migration** to the database with `alembic upgrade head`.

By following these steps, you can ensure that your database schema stays in sync with your application's models.